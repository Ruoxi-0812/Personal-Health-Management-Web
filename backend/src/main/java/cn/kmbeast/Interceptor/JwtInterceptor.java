package cn.kmbeast.Interceptor;

import cn.kmbeast.context.LocalThreadHolder;
import cn.kmbeast.pojo.api.ApiResult;
import cn.kmbeast.pojo.api.Result;
import cn.kmbeast.utils.JwtUtil;
import com.alibaba.fastjson2.JSONObject;
import io.jsonwebtoken.Claims;
import org.springframework.web.servlet.HandlerInterceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.Writer;

/**
 * JWT Token Interceptor for Request Authentication.
 *
 * - After a user successfully logs in, they receive a token generated by the backend.
 * - The frontend stores this token locally.
 * - For subsequent API requests, the token is included in the request headers.
 * - Before processing any request, this interceptor checks the token:
 *   - If the token is valid, the request is allowed to proceed.
 *   - If the token is invalid, the request is blocked and an error response is returned.
 */
public class JwtInterceptor implements HandlerInterceptor {

    /**
     * Pre-request interception
     *
     * @param request  Current HTTP request
     * @param response Current HTTP response
     * @param handler  Chosen handler for execution
     * @return boolean true: Allow request; false: Block request
     * @throws Exception Exception handling
     */
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        String requestMethod = request.getMethod();
        if ("OPTIONS".equals(requestMethod)) {
            return true;
        }
        String requestURI = request.getRequestURI();
        if (requestURI.contains("/login") || requestURI.contains("/error") || requestURI.contains("/file") || requestURI.contains("/register")) {
            return true;
        }
        String token = request.getHeader("token");
        Claims claims = JwtUtil.fromToken(token);
        if (claims == null) {
            Result<String> error = ApiResult.error("Authentication failed. Please log in first.");
            response.setContentType("application/json;charset=UTF-8");
            Writer stream = response.getWriter();
            stream.write(JSONObject.toJSONString(error));
            stream.flush();
            stream.close();
            return false;
        }
        Integer userId = claims.get("id", Integer.class);
        Integer roleId = claims.get("role", Integer.class);
        LocalThreadHolder.setUserId(userId, roleId);
        return true;
    }
}
